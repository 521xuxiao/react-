import React, {Component} from 'react';
import { Table, Button, Space, Input, Modal, message, Pagination, Select} from 'antd';
import Axios from 'axios';
import { ExclamationCircleOutlined } from '@ant-design/icons';
import './provider.scss'
const {Column} =  Table;  const { confirm } = Modal;
const {Option} = Select;
class Provider extends Component{
    constructor(props) {
        super(props);
        this.addBtn = "";  this.changeBtn = "";  this.deleteBtn = "";
        this.currentFlag= undefined;
        this.state = {
            currentIndex: 0,
            treeList: [{name: '代办', key: 1}, {name: '冷库', key: 2}, {name: '果园', key: 3}],
            providerStr: '',
            dataSource: [],
            pageTotle: 0,  currentPage: 1, pageSize: 10,
            msg: '',
            visible: false,
            names: '',
            phones: '',
            addreSs: '',
            yeCode: '',    yeCodeList: [],
            flag: 1,
            id: '',
            registrationOrchardList: [],   registrationOrchard: '',
            batchNumberId: '',    batchNumberIdList: []
        }
    }
    render() {
        return(
            <div id="provider">
                <div className="provider">
                    <div className="dictionaryLeft">
                        <div className="innerDiv">
                            <div className="dictType">供应商类型</div>
                            <ul className="ul1">
                                {
                                    this.state.treeList.map((item, index)=>{
                                        return(
                                            <li className={index==this.state.currentIndex?'active li1':'li1'} key={item.key} onClick={this.handleClick.bind(this, item, index)}>{item.name}</li>
                                        )
                                    })
                                }
                            </ul>
                        </div>
                    </div>
                    <div className="dictionaryRight">
                        <div className="innerRight">
                            <div className="placeSearch">
                                <span>供应商</span>
                                <Input className="input1" allowClear onChange={(e)=>{this.setState({providerStr: e.target.value})}}/>
                                <button className="searchs" onClick={this.searchMethods.bind(this)}>查询</button>
                            </div>
                            <div className="bg">
                                <button className="searchs" onClick={this.add.bind(this)}
                                    style={this.addBtn == 1 ? {display: 'inlineBlock'} : {display: "none"}}
                                >新增</button>
                            </div>
                            <div className="placeTable">
                                <Table pagination={false} dataSource={this.state.dataSource}>
                                    <Column title="序号" align="center" width="100px" render={(text, record, index)=>(
                                        <span>{(this.state.currentPage-1)*this.state.pageSize+index+1}</span>
                                    )}/>
                                    <Column title="供应商名称" dataIndex="supplierName" key="supplierName" align="center"/>
                                    <Column title="供应商类型" dataIndex="supplierType" key="supplierType" align="center" render={(text)=>(
                                        <span>{text==1?"代办":text==2?"冷库":"果园"}</span>
                                    )}/>
                                    <Column title="联系方式" dataIndex="phone" key="phone" align="center"/>
                                    <Column title="地址" dataIndex="address" key="address" align="center"/>
                                    <Column title="业务员" dataIndex="realname" key="realname" align="center"/>
                                    <Column title="操作" align="center"
                                            render={(text, record) => (
                                                <Space size="large">
                                                    <span onClick={this.changes.bind(this, record)} className="changes"
                                                          style={this.changeBtn == 1 ? {display: 'inlineBlock'} : {display: "none"}}
                                                    >编辑</span>
                                                    <span onClick={this.deletes.bind(this, record)} className="deletes"
                                                          style={this.deleteBtn == 1 ? {display: 'inlineBlock'} : {display: "none"}}
                                                    >删除</span>
                                                    <span key={"details"} onClick={this.details.bind(this, record)} className="details span11">详情</span>
                                                </Space>
                                            )}
                                    />
                                </Table>
                            </div>
                            <div className="placePagination">
                                <Pagination showTotal={()=>`共 ${this.state.pageTotle} 条`} current={this.state.currentPage} onChange={this.changePages.bind(this)} pageSize={this.state.pageSize} total={this.state.pageTotle} showSizeChanger={false}/>
                            </div>
                        </div>
                    </div>
                    <Modal title={this.state.msg} width="60%" footer={null} getContainer={false} closable={false}  visible={this.state.visible} centered={true}>
                        <div className="modal1">
                            <div className="div3">
                                <ul className="ul1">
                                    <li className="li1">
                                        <span className="span1">*名字</span>
                                        <Input allowClear value={this.state.names} onChange={(e)=>{this.setState({names: e.target.value})}} className={"input3"}
                                               disabled={this.state.flag==3?true:false}/>
                                    </li>
                                    <li className="li1 li2">
                                        <span className="span1">*手机号</span>
                                        <Input allowClear value={this.state.phones} onChange={(e)=>{this.setState({phones: e.target.value})}} className={"input3"}
                                               disabled={this.state.flag==3?true:false}/>
                                    </li>
                                </ul>
                                <ul className="ul1">
                                    <li className="li1">
                                        <span className="span1">*供应商住址</span>
                                        <Input allowClear value={this.state.addreSs} onChange={(e)=>{this.setState({addreSs: e.target.value})}} className={"input3"}
                                               disabled={this.state.flag==3?true:false}/>
                                    </li>
                                    <li className="li1 li2">
                                        <span className="span1">*业务员工号</span>
                                        <Select  className={"input3"} allowClear onChange={(e)=>{this.setState({yeCode: e})}} value={this.state.yeCode}
                                                 disabled={this.state.flag==3?true:false}>
                                            {
                                                this.state.yeCodeList.map((item, index)=>{
                                                    return(
                                                        <Option value={item.empno} key={index}>{item.realname}</Option>
                                                    )
                                                })
                                            }
                                        </Select>
                                    </li>
                                </ul>
                                <ul className="ul1">
                                    <li className="li1">
                                        <span className="span1">*果园注册号</span>
                                        <Select  className={"input3"} allowClear onChange={(e)=>{this.setState({registrationOrchard: e})}} value={this.state.registrationOrchard}
                                                 disabled={this.state.flag==3?true:false}>
                                            {
                                                this.state.registrationOrchardList.map((item, index)=>{
                                                    return(
                                                        <Option value={item.id} key={index}>{item.registrationCode}</Option>
                                                    )
                                                })
                                            }
                                        </Select>
                                    </li>
                                    <li className="li1 li2">
                                        <span className="span1">*批次号</span>
                                        <Select  className={"input3"} allowClear onChange={(e)=>{this.setState({batchNumberId: e})}} value={this.state.batchNumberId}
                                                 disabled={this.state.flag==3?true:false}>
                                            {
                                                this.state.batchNumberIdList.map((item, index)=>{
                                                    return(
                                                        <Option value={item.id} key={index}>{item.batchNumber}</Option>
                                                    )
                                                })
                                            }
                                        </Select>
                                    </li>
                                </ul>
                            </div>
                        </div>
                        <div className="div4">
                            <li className="li4">
                                <Button className="btn4" type="danger" onClick={()=>{this.setState({visible: false})}}>取消</Button>
                            </li>
                            <li className="li4" style={this.state.flag==3?{display: 'none'}:{display: 'block'}}>
                                <Button className="btn4" type="primary" onClick={this.handleOk.bind(this)}>确定</Button>
                            </li>
                        </div>
                    </Modal>
                </div>
            </div>
        )
    }
    initData(currentPage, ifNulls) {
        this.currentFlag = ifNulls == undefined ? 1: ifNulls;
        let params = {
            currentPage,
            pageSize: this.state.pageSize,
            supplierType: ifNulls == undefined ? 1 : ifNulls,
            supplierName: this.state.providerStr
        };
        Axios.post('/self/erp/baseinfo/querySupplier', params).then((res)=>{
            // console.log(res.data);
            if(res.data.success) {
                res.data.data.suppliers.forEach((item)=>{
                    item.key = item.id;
                });
                this.setState({
                    pageTotle: res.data.data.num,
                    dataSource: res.data.data.suppliers
                })
            }else{
                this.setState({
                    pageTotle: 0,
                    dataSource: []
                })
            }
        })
    }
    // 业务员工号下拉框
    yeCodeListMethod() {
        Axios.post('/self/erp/baseinfo/queryUser').then((res)=>{
            // console.log(res.data);
            if(res.data.success) {
                this.setState({
                    yeCodeList: res.data.data.users
                })
            }else{
                this.setState({
                    yeCodeList: []
                })
            }
        });
        // 果园注册号下拉框
        Axios.post("/self/erp/qualityCheck/queryOrchard").then((res)=>{
            console.log(res.data);
            if(res.data.success) {
                this.setState({
                    registrationOrchardList: res.data.data.orchards
                })
            }else{
                this.setState({
                    registrationOrchardList: []
                })
            }
        });
        // 批次号下拉框
        Axios.post('/self/erp/qualityCheck/queryBatchNumber').then((res)=>{
            // console.log(res.data.data);
            if(res.data.success) {
                this.setState({
                    batchNumberIdList: res.data.data.batchNumbers
                })
            }else{
                this.setState({
                    batchNumberIdList: []
                })
            }
        })
    }

    handleClick(item, index) {
        this.setState({
            currentIndex: index
        });
        this.initData(1, item.key);
    }
    searchMethods() {
        this.initData(1, this.currentFlag);
        this.setState({
            currentPage: 1
        })
    }
    add() {
        this.setState({
            msg: '新增',
            visible: true,
            flag: 1,
            phones: '',
            names: '',
            addreSs: '',
            yeCode: '',
            registrationOrchard: '',   batchNumberId: ''
        })
    }
    changes(row) {
        console.log(row);
        this.setState({
            msg: '修改',
            visible: true,
            flag: 2,
            id: row.id,
            phones: row.phone,
            names: row.supplierName,
            addreSs: row.address,
            yeCode: row.empno,
            registrationOrchard: row.registrationCode  ,   batchNumberId: row.batchNumberId
        })
    }
    details(row) {
        this.setState({
            msg: '详情',
            visible: true,
            flag: 3,
            id: row.id,
            phones: row.phone,
            names: row.supplierName,
            addreSs: row.address,
            yeCode: row.empno
        })
    }
    deletes(row) {
        let that = this;
        confirm({
            title: '你确定要删除吗?',
            icon: <ExclamationCircleOutlined />,
            content: '',
            onOk() {
                let params = {
                    id: row.id
                };
                Axios.post('/self/erp/baseinfo/deleteSupplier', params).then((res)=>{
                    if(res.data.success) {
                        message.success("删除成功");
                        that.initData(that.state.currentPage, that.currentFlag);
                    }else{
                        message.warning(res.data.message);
                    }
                })
            },
            onCancel() {},
        });
    }
    changePages(val) {
        this.initData(val, this.currentFlag);
        this.setState({
            currentPage: val
        })
    }
    handleOk() {
        let params = {
            phone: this.state.phones,
            supplierName: this.state.names,
            address: this.state.addreSs,
            empno: this.state.yeCode,
            supplierType: this.currentFlag,
            orchardId: this.state.registrationOrchard,
            batchNumberId: this.state.batchNumberId
        };
        if(this.state.flag == 1) {  // 新增
            Axios.post('/self/erp/baseinfo/addSupplier', params).then((res)=>{
                if(res.data.success) {
                    message.success("成功");
                    this.initData(this.state.currentPage, this.currentFlag);
                    this.setState({
                        visible: false
                    })
                }else{
                    message.warning(res.data.message);
                }
            })
        }else{
            params.id = this.state.id;
            Axios.post('/self/erp/baseinfo/updateSupplier', params).then((res)=>{
                if(res.data.success) {
                    message.success("修改成功");
                    this.initData(this.state.currentPage, this.currentFlag);
                    this.setState({
                        visible: false
                    })
                }else{
                    message.warning(res.data.message);
                }
            })
        }
    }
    componentDidMount() {
        this.initData(this.state.currentPage, this.currentFlag);
        this.yeCodeListMethod();
    }
    componentWillMount() {
        let buttonList = JSON.parse(sessionStorage.getItem("buttonList"));
        // console.log(buttonList);
        if(buttonList && buttonList.length) {
            buttonList.forEach((item)=>{
                if(item.localIndex == "2-1-1") {
                    this.addBtn = item.flag;
                }
                if(item.localIndex == "2-1-2") {
                    this.changeBtn = item.flag;
                }
                if(item.localIndex == "2-1-3") {
                    this.deleteBtn = item.flag;
                }
            })
        }
    }
}
export default Provider;
