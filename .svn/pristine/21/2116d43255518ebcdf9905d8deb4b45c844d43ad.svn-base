{"version":3,"sources":["components/slider/slider.js","App.js","router/router.js","serviceWorker.js","index.js"],"names":["Slider","props","state","className","id","Component","App","MyRouter","path","render","to","Boolean","window","location","hostname","match","Axios","interceptors","response","use","console","log","error","code","Promise","reject","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"wSAqBeA,G,yDAhBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,GAFE,E,qDAOf,OACI,yBAAKC,UAAU,SAASC,GAAG,UACvB,wBAAID,UAAU,MAAd,MACA,wBAAIA,UAAU,MAAd,W,GAXKE,cCmBNC,G,yDAjBX,WAAaL,GAAQ,IAAD,8BAChB,cAAMA,IACDC,MAAQ,GAFG,E,qDAOhB,OACI,+CAEI,kBAAC,EAAD,MACA,kBAAC,SAAD,kB,GAZEG,cCcHE,E,uKAdP,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,OAAOC,OAAQ,WACvB,OACI,kBAAC,EAAD,SAKR,kBAAC,IAAD,CAAUC,GAAG,c,GAXNL,a,gCCSHM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAAMC,aAAaC,SAASC,KACxB,SAACD,GAEG,OADAE,QAAQC,IAAIH,GACLA,KAEX,SAACI,GAEG,OADAF,QAAQC,IAAIC,EAAMpB,MAAMqB,MACjBC,QAAQC,OAAOH,MAG9BI,IAASjB,OACP,kBAAC,EAAD,MACAkB,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAb,GACLF,QAAQE,MAAMA,EAAMc,c","file":"static/js/main.5a284769.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n// import { withRouter } from 'react-router-dom'\r\nimport './slider.scss';\r\n\r\nclass Slider extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n    render() {\r\n        return(\r\n            <div className=\"slider\" id=\"slider\">\r\n                <h4 className=\"h4\">h4</h4>\r\n                <h4 className=\"h5\">h4</h4>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Slider;\r\n// export default withRouter(Slider);\r\n","import React, {Component} from 'react';\nimport { Button } from 'element-react';\nimport Slider from './components/slider/slider.js';\nimport './App.css';\n\nclass App extends Component {\n    constructor (props) {\n        super(props)\n        this.state = {\n\n        }\n    }\n    render() {\n        return(\n            <div>\n                我是app\n                <Slider/>\n                <Button>test</Button>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","import React, {Component} from 'react';\r\nimport {BrowserRouter as Router, Route, Redirect} from 'react-router-dom';\r\nimport App from '../App.js';\r\nclass MyRouter extends Component{\r\n    render() {\r\n        return(\r\n            <Router>\r\n                <Route path=\"/app\" render={()=>{\r\n                    return(\r\n                        <App>\r\n\r\n                        </App>\r\n                    )\r\n                }}></Route>\r\n                <Redirect to=\"/App\" />\r\n            </Router>\r\n        )\r\n    }\r\n}\r\nexport default MyRouter;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MyRouter from './router/router.js';\nimport Axios from 'axios';\nimport './index.css';\nimport 'element-theme-default';\n\nimport * as serviceWorker from './serviceWorker';\nAxios.interceptors.response.use(\n    (response) => {\n        console.log(response);\n        return response;\n    },\n    (error) => {\n        console.log(error.state.code)\n        return Promise.reject(error);\n    }\n);\nReactDOM.render(\n  <MyRouter />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}