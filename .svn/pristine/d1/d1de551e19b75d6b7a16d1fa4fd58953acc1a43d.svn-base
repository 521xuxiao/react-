import React ,{Component} from "react";
import {withRouter} from 'react-router-dom';
import Axios from 'axios';
import "./materiel.scss"
import {Button, Input, InputNumber, Modal, Pagination, Select, Space, Table, message, DatePicker } from "antd";
import {ExclamationCircleOutlined} from "@ant-design/icons";
import moment from "moment";
import locale from "antd/es/date-picker/locale/zh_CN";
const Column = {Table}
const {confirm} = Modal;
const {TextArea} = Input;
class Materiel extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            treeList: [],
            currentIndex: 0,
            liList: [{id: '0', name: "包装箱管理"}, {id: '1', name: '购销记录'}],
            tabCurrentIndex: 0,
            valueId: '',

            queName: '',
            dataSource: [],
            currentPage: 1,
            pageSize: 10,
            pageTotal: 0,

            msg: "",
            visible: false,
            xiangName  : "", capacity:"",  weight:"",
            id: '',

            names: '',
            dataSource2: [],
            currentPage2: 1,
            pageSize2: 10,
            pageTotal2: 0,
            visible2: false,   xiangName2: '',   numbers: null,    price: null ,   mark: '', msg2: '', flag2: 0, dateTime: ''
        }
    }
    render() {
        return(
            <div id="materiel">
                <div className="materiel">
                    <div className="dictionaryLeft">
                        <div className="innerDiv">
                            <div className="dictType">物料类型</div>
                            <ul className="ul1">
                                {
                                    this.state.treeList.map((item, index)=>{
                                        return(   //
                                            <li className={index==this.state.currentIndex?'active li1':'li1'} key={item.valueId} onClick={this.handleClick.bind(this, index, item)}>{item.value}</li>
                                        )
                                    })
                                }
                            </ul>
                        </div>
                    </div>
                    <div className="dictionaryRight">
                        <div className="innerRight">
                            <ul className="materiel_ul1">
                                {
                                    this.state.liList.map((item, index)=>{
                                        return(
                                            <li key={item.id} onClick={this.tabClick.bind(this, index)} className={this.state.tabCurrentIndex==index?"active materiel_li1":"materiel_li1"}>{item.name}</li>
                                        )
                                    })
                                }
                            </ul>
                            {
                                this.isShowChildren()
                            }
                        </div>
                    </div>


                    <Modal title={this.state.msg} width="60%" footer={null} getContainer={false} closable={false}  visible={this.state.visible} centered={true}>
                        <div className="modal1">
                            <div className="div3">
                                <ul className="ul1">
                                    <li className="li1">
                                        <span className="span1">*箱子名称</span>
                                        <Input allowClear onChange={(e)=>{this.setState({xiangName: e.target.value})}} value={this.state.xiangName} className={"input3"}
                                               disabled={this.state.flag==3?true:false}/>
                                    </li>
                                    <li className="li1 li2">
                                        <span className="span1">*容量</span>
                                        <InputNumber allowClear onChange={(e)=>{this.setState({capacity: e})}} value={this.state.capacity} className={"input3"}
                                                     disabled={this.state.flag==3?true:false}/>
                                    </li>
                                </ul>
                                <ul className="ul1">
                                    <li className="li1">
                                        <span className="span1">*重量</span>
                                        <InputNumber allowClear onChange={(e)=>{this.setState({weight: e})}} value={this.state.weight} className={"input3"}
                                                     disabled={this.state.flag==3?true:false}/>
                                    </li>
                                </ul>
                            </div>
                        </div>
                        <div className="div4">
                            <li className="li4">
                                <Button className="btn4" type="danger" onClick={()=>{this.setState({visible: false})}}>取消</Button>
                            </li>
                            <li className="li4" style={this.state.flag==3?{display: 'none'}:{display: 'block'}}>
                                <Button className="btn4" type="primary" onClick={this.handleOk.bind(this)}>确定</Button>
                            </li>
                        </div>
                    </Modal>

                    <Modal title={this.state.msg2} width="60%" footer={null} getContainer={false} closable={false}  visible={this.state.visible2} centered={true}>
                        <div className="modal1">
                            <div className="div3">
                                <ul className="ul1">
                                    <li className="li1">
                                        <span className="span1">*名称</span>
                                        <Input allowClear onChange={(e)=>{this.setState({xiangName2: e.target.value})}} value={this.state.xiangName2} className={"input3"}
                                               disabled={this.state.flag==3?true:false}/>
                                    </li>
                                    <li className="li1 li2">
                                        <span className="span1">*数量</span>
                                        <InputNumber allowClear onChange={(e)=>{this.setState({numbers: e})}} value={this.state.numbers} className={"input3"}
                                                     disabled={this.state.flag==3?true:false}/>
                                    </li>
                                </ul>
                                <ul className="ul1">
                                    <li className="li1">
                                        <span className="span1">*单价</span>
                                        <InputNumber allowClear onChange={(e)=>{this.setState({price: e})}} value={this.state.price} className={"input3"}
                                                     disabled={this.state.flag==3?true:false}/>
                                    </li>
                                    <li className="li1 li2">
                                        <span className="span1">*购进日期</span>
                                        <DatePicker className="input3" onChange={this.orderTime.bind(this)} value={this.state.dateTime==undefined || this.state.dateTime=='' ?"":moment(this.state.dateTime, 'YYYY-MM-DD')} locale={locale}
                                                    disabled={this.state.flag==3?true:false}/>
                                    </li>
                                </ul>
                                <ul className="ul1">
                                    <li className="li1 li11" style={{width: '100%'}}>
                                        <span className="span1">*备注</span>
                                        <TextArea allowClear onChange={(e)=>{this.setState({mark: e.target.value})}} value={this.state.mark} className={"input3"}
                                                  disabled={this.state.flag==3?true:false} />
                                    </li>
                                </ul>
                            </div>
                        </div>
                        <div className="div4">
                            <li className="li4">
                                <Button className="btn4" type="danger" onClick={()=>{this.setState({visible2: false})}}>取消</Button>
                            </li>
                            <li className="li4" style={this.state.flag==3?{display: 'none'}:{display: 'block'}}>
                                <Button className="btn4" type="primary" onClick={this.handleOk2.bind(this)}>确定</Button>
                            </li>
                        </div>
                    </Modal>
                </div>
            </div>
        )
    }
    isShowChildren() {
        if(this.state.tabCurrentIndex == 0) {
            return(
                <div key={1}>
                    <div className="placeSearch">
                        <span>箱子名称</span>
                        <Input className="input1" allowClear onChange={(e)=>{this.setState({queName: e.target.value})}}/>
                        <button className="searchs" onClick={this.searchMethods.bind(this)}>查询</button>
                    </div>
                    <div className="bg">
                        <button className="searchs" onClick={this.add.bind(this)}>新增</button>
                    </div>
                    <div className="placeTable">
                        <Table pagination={false} dataSource={this.state.dataSource} locale={{emptyText: "暂无数据"}}>
                            <Column title="序号" align="center" key="index" dataIndex="index" width="100px" render={(text, record, index)=>(
                                <span>{(this.state.currentPage-1)*this.state.pageSize + index+1}</span>
                            )}/>
                            <Column title="名称" dataIndex="accessoriesName" key="accessoriesName" align="center"/>
                            <Column title="容量" dataIndex="capacity" key="capacity" align="center"/>
                            <Column title="重量" dataIndex="weight" key="weight" align="center"/>
                            <Column title="剩余重量/总个数" dataIndex="address" key="address" align="center" render={(text, record)=>(
                                <span>{record.number}/{record.totalNum}</span>
                            )} />
                            <Column title="总价格" dataIndex="amount" key="amount" align="center"/>
                            <Column title="操作" align="center" key="records" dataIndex="records"
                                render={(text, record) => (
                                    <Space size="large">
                                        <span key={"changes"} onClick={this.changes.bind(this, record)} className="changes">编辑</span>
                                        <span key={"deletes"} onClick={this.deletes.bind(this, record)} className="deletes">删除</span>
                                        <span key={"details"} onClick={this.details.bind(this, record)} className="details span11">详情</span>
                                    </Space>
                                )}
                            />
                        </Table>
                    </div>
                    <div className="placePagination">
                        <Pagination showTotal={()=>`共 ${this.state.pageTotal} 条`} current={this.state.currentPage} onChange={this.changePages.bind(this)} pageSize={this.state.pageSize} total={this.state.pageTotal} showSizeChanger={false}/>
                    </div>
                </div>
            )
        }else{
            return(
                <div key={2}>
                    <div className="placeSearch">
                        <span>名称</span>
                        <Input className="input1" allowClear onChange={(e)=>{this.setState({names: e.target.value})}}/>
                        <button className="searchs" onClick={this.searchMethods2.bind(this)}>查询</button>
                    </div>
                    <div className="bg">
                        <button className="searchs" onClick={this.add2.bind(this)}>新增</button>
                    </div>
                    <div className="placeTable">
                        <Table pagination={false} dataSource={this.state.dataSource2} locale={{emptyText: "暂无数据"}}>
                            <Column title="序号" align="center" key="index" dataIndex="index" width="100px" render={(text, record, index)=>(
                                <span>{(this.state.currentPage2-1)*this.state.pageSize2 + index+1}</span>
                            )}/>
                            <Column title="订单名称" dataIndex="recordName" key="recordName" align="center"/>
                            <Column title="名称" dataIndex="accessoriesName" key="accessoriesName" align="center"/>
                            <Column title="制单人" dataIndex="createdName" key="createdName" align="center"/>
                            <Column title="类型" dataIndex="type" key="type" align="center" render={(text)=>(
                                <span>{text==1?"购进":"消耗"}</span>
                            )}/>
                            <Column title="数量" dataIndex="number" key="number" align="center"/>
                            <Column title="单价" dataIndex="unitPrice" key="unitPrice" align="center" render={(text)=>(
                                <span>{text / 100}</span>
                            )}/>
                            <Column title="总计" dataIndex="totalPrice" key="totalPrice" align="center" render={(text)=>(
                                <span>{text / 100}</span>
                            )}/>
                            <Column title="操作" align="center" key="records" dataIndex="records"
                                render={(text, record) => (
                                    <Space size="large">
                                        <span key={"details2"} onClick={this.details2.bind(this, record)} className="details span11">详情</span>
                                    </Space>
                                )}
                            />
                        </Table>
                    </div>
                    <div className="placePagination">
                        <Pagination showTotal={()=>`共 ${this.state.pageTotal2} 条`} current={this.state.currentPage2} onChange={this.changePages2.bind(this)} pageSize={this.state.pageSize2} total={this.state.pageTotal2} showSizeChanger={false}/>
                    </div>
                </div>
            )
        }
    }
    initData(currentPage, accessoriesTypeId) {
        let params = {
            currentPage,
            pageSize: this.state.pageSize,
            accessoriesTypeId
        }
        Axios.post("/self/erp/baseinfo/queryAccessories", params).then((res)=>{
            console.log(res.data.data)
            if(res.data.success) {
                res.data.data.accessories.forEach((item)=>{
                    item.key = item.id;
                })
                this.setState({
                    dataSource: res.data.data.accessories,
                    pageTotal: res.data.data.num,
                })
            }else{
                this.setState({
                    dataSource: [],
                    pageTotal: 0
                })
            }
        })
    }
    searchMethods() {
        this.initData(this.state.currentPage, this.valueIds);
    }
    add() {
        this.setState({
            visible: true,
            flag: 1,
            msg: "新增",
            xiangName: '',  capacity: null,  weight: null
        })
    }
    changePages(val) {
        this.initData(val, this.valueIds);
        this.setState({
            currentPage: val
        })
    }
    changes(row) {
        this.setState({
            visible: true,
            flag: 2,
            msg: "修改",
            id: row.id,
            xiangName: row.accessoriesName,  capacity: row.capacity,  weight: row.weight
        })
    }
    deletes(row) {
        let that = this;
        confirm({
            title: '你确定要删除吗?',
            icon: <ExclamationCircleOutlined />,
            content: '',
            onOk() {
                let params = {
                    id: row.id
                };
                Axios.post('/self/erp/baseinfo/deleteAccessories', params).then((res)=>{
                    if(res.data.success) {
                        message.success("删除成功");
                        that.initData(that.state.currentPage, that.valueIds);
                    }else{
                        message.warning(res.data.message);
                    }
                })
            },
            onCancel() {},
        });
    }
    details(row) {
        this.setState({
            visible: true,
            flag: 3,
            msg: "详情",
            xiangName: row.accessoriesName,  capacity: row.capacity,  weight: row.weight
        })
    }
    handleOk() {
        let params = {
            accessoriesName: this.state.xiangName,
            accessoriesTypeId: this.valueIds,
            capacity: this.state.capacity,
            weight: this.state.weight
        }
        if(this.state.flag == 1) {
            Axios.post("/self/erp/baseinfo/addAccessories", params).then((res)=>{
                if(res.data.success) {
                    message.success("新增成功");
                    this.initData(this.state.currentPage, this.valueIds);
                    this.setState({
                        visible: false
                    })
                }else{
                    message.warning(res.data.message);
                }
            })
        }else{
            params.id = this.state.id;
            Axios.post("/self/erp/baseinfo/updateAccessories", params).then((res)=>{
                if(res.data.success) {
                    message.success("修改成功");
                    this.initData(this.state.currentPage, this.valueIds);
                    this.setState({
                        visible: false
                    })
                }else{
                    message.warning(res.data.message);
                }
            })
        }
    }
    leftSlider() {
        Axios.post("/self/erp/baseinfo/queryAccessoriesType", {}).then((res)=>{
            // console.log(res.data.data)
            if(res.data.success) {
                this.setState({
                    treeList: res.data.data.accessoriesType
                })
                this.valueIds = res.data.data.accessoriesType[0].valueId
                this.initData(this.state.currentPage, res.data.data.accessoriesType[0].valueId);
                this.initData2(this.state.currentPage2, res.data.data.accessoriesType[0].valueId);
            }else{
                this.setState({
                    treeList: []
                })
            }
        })
    }
    handleClick(i, item) {
        this.valueIds = item.valueId;
        this.setState({
            currentIndex: i
        });
        this.initData(this.state.currentPage, item.valueId);
        this.initData2(this.state.currentPage2, item.valueId);
    }
    tabClick(i) {
        this.setState({
            tabCurrentIndex: i
        })
    }
    componentDidMount() {
        this.leftSlider();
    }

    searchMethods2() {
        this.initData2(this.state.currentPage2, this.valueIds);
    }
    add2() {
        this.setState({
            visible2: true,
            msg2: "新增",
            xiangName2: '',
            numbers: null,
            price: null,
            mark: "",
            flag2: 1,
            dateTime: ""
        })
    }
    details2(row) {
        this.setState({
            visible2: true,
            msg2: "详情",
            xiangName2: row.accessoriesName,
            numbers: row.number,
            price: row.unitPrice / 100,
            mark: row.typeIntro,
            flag2: 3,
            dataTime: this.state.buyDate
        })
    }
    changePages2(val) {
        this.initData2(val, this.valueIds);
        this.setState({
            currentPage2: val
        })
    }
    orderTime(dates, pickys) {
        if(pickys) {
            this.setState({
                dateTime: pickys
            })
        }else{
            this.setState({
                dateTime: ""
            })
        }
    }
    initData2(currentPage, accessoriesTypeId) {
        let params = {
            currentPage,
            pageSize: this.state.pageSize,
            accessoriesTypeId
        }
        Axios.post("/self/erp/baseinfo/queryAccessoriesBuyUseRecords", params).then((res)=>{
            console.log(res.data.data)
            if(res.data.success) {
                res.data.data.accessoriesBuyUseRecords.forEach((item)=>{
                    item.key = item.id;
                })
                this.setState({
                    dataSource2: res.data.data.accessoriesBuyUseRecords,
                    pageTotal2: res.data.data.num,
                })
            }else{
                this.setState({
                    dataSource2: [],
                    pageTotal2: 0
                })
            }
        })
    }
    handleOk2() {
        if(this.state.flag2 == 1) {
            let params = {
                accessoriesTypeId: this.valueIds,
                accessoriesId: this.state.xiangName2,
                number: this.state.numbers,
                unitPrice: this.state.price * 100,
                note: this.state.mark,
                buyDate: this.state.dateTime
            }
            Axios.post("/self/erp/baseinfo/addAccessoriesBuyUseRecord", params).then((res)=>{
                if(res.data.success) {
                    message.success("新增成功");
                    this.initData2(this.state.currentPage2, this.valueIds);
                    this.setState({
                        visible2: false
                    })
                }else{
                    message.warning(res.data.message);
                }
            })
        }
    }
}
export default withRouter(Materiel);